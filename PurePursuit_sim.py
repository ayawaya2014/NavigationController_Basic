#! /usr/bin/python

import math
import time
import matplotlib.pyplot as plt

x_path = [319.0, 319.0, 320.0, 320.0, 320.0, 321.0, 321.0, 322.0, 322.0, 322.0, 323.0, 323.0, 323.0, 324.0, 324.0, 324.0, 325.0, 325.0, 326.0, 326.0, 326.0, 327.0, 327.0, 327.0, 328.0, 328.0, 328.0, 329.0, 329.0, 329.0, 330.0, 330.0, 331.0, 331.0, 331.0, 332.0, 332.0, 332.0, 333.0, 333.0, 333.0, 334.0, 334.0, 335.0, 335.0, 335.0, 336.0, 336.0, 336.0, 337.0, 337.0, 337.0, 338.0, 338.0, 338.0, 339.0, 339.0, 340.0, 340.0, 340.0, 341.0, 341.0, 341.0, 342.0, 342.0, 342.0, 343.0, 343.0, 344.0, 344.0, 344.0, 345.0, 345.0, 345.0, 346.0, 346.0, 346.0, 347.0, 347.0, 347.0, 348.0, 348.0, 349.0, 349.0, 349.0, 350.0, 350.0, 350.0, 351.0, 351.0, 351.0, 352.0, 352.0, 353.0, 353.0, 353.0, 354.0, 354.0, 354.0, 355.0, 355.0, 355.0, 356.0, 356.0, 356.0, 357.0, 357.0, 358.0, 358.0, 358.0, 359.0, 359.0, 359.0, 360.0, 360.0, 360.0, 361.0, 361.0, 362.0, 362.0, 362.0, 363.0, 363.0, 363.0, 364.0, 364.0, 364.0, 365.0, 365.0, 365.0, 366.0, 366.0, 367.0, 367.0, 367.0, 368.0, 368.0, 368.0, 369.0, 369.0, 369.0, 370.0, 370.0, 370.0, 371.0, 371.0, 371.0, 372.0, 372.0, 372.0, 373.0, 373.0, 373.0, 374.0, 374.0, 374.0, 375.0, 375.0, 375.0, 375.0, 376.0, 376.0, 376.0, 376.0, 377.0, 377.0, 377.0, 377.0, 378.0, 378.0, 378.0, 378.0, 378.0, 379.0, 379.0, 379.0, 379.0, 379.0, 379.0, 380.0, 380.0, 380.0, 380.0, 380.0, 380.0, 380.0, 380.0, 380.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 381.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 382.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 383.0, 384.0, 384.0, 384.0, 384.0, 384.0, 384.0, 384.0, 384.0, 384.0, 385.0, 385.0, 385.0, 385.0, 385.0, 385.0, 386.0, 386.0, 386.0, 386.0, 386.0, 387.0, 387.0, 387.0, 387.0, 388.0, 388.0, 388.0, 388.0, 389.0, 389.0, 389.0, 389.0, 390.0, 390.0, 390.0, 391.0, 391.0, 391.0, 392.0, 392.0, 392.0, 393.0, 393.0, 393.0, 394.0, 394.0, 394.0, 395.0, 395.0, 395.0, 396.0, 396.0, 396.0, 397.0, 397.0, 397.0, 398.0, 398.0, 398.0, 399.0, 399.0, 400.0, 400.0, 400.0, 401.0, 401.0, 401.0, 402.0, 402.0, 402.0, 403.0, 403.0, 403.0, 404.0, 404.0, 405.0, 405.0, 405.0, 406.0, 406.0, 406.0, 407.0, 407.0, 407.0, 408.0, 408.0, 409.0, 409.0, 409.0, 410.0, 410.0, 410.0, 411.0, 411.0, 411.0, 412.0, 412.0, 412.0, 413.0, 413.0, 414.0, 414.0, 414.0, 415.0, 415.0, 415.0, 416.0, 416.0, 416.0, 417.0, 417.0, 418.0, 418.0, 418.0, 419.0, 419.0, 419.0, 420.0, 420.0, 420.0, 421.0, 421.0, 421.0, 422.0, 422.0, 423.0, 423.0, 423.0, 424.0, 424.0, 424.0, 425.0, 425.0, 425.0, 426.0, 426.0, 427.0, 427.0, 427.0, 428.0, 428.0, 428.0, 429.0, 429.0, 429.0, 430.0, 430.0, 430.0, 431.0, 431.0, 432.0, 432.0, 432.0, 433.0, 433.0, 433.0, 434.0, 434.0, 434.0, 435.0, 435.0, 436.0, 436.0, 436.0, 437.0, 437.0, 437.0, 438.0, 438.0, 438.0, 439.0, 439.0, 439.0, 440.0, 440.0, 441.0, 441.0, 441.0, 442.0, 442.0, 442.0, 443.0, 443.0, 443.0, 444.0, 444.0, 445.0, 445.0, 445.0, 446.0, 446.0, 446.0, 447.0, 447.0, 447.0, 448.0, 448.0, 448.0, 449.0, 449.0, 450.0, 450.0, 450.0, 451.0, 451.0, 451.0, 452.0, 452.0, 452.0, 453.0, 453.0, 454.0, 454.0, 454.0, 455.0, 455.0, 455.0, 456.0, 456.0, 456.0, 457.0, 457.0, 457.0, 458.0, 458.0, 459.0, 459.0, 459.0, 460.0, 460.0, 460.0, 461.0, 461.0, 461.0, 462.0, 462.0, 463.0, 463.0, 463.0, 464.0, 464.0, 464.0, 465.0, 465.0, 465.0, 466.0, 466.0, 466.0, 467.0, 467.0, 468.0, 468.0, 468.0, 469.0, 469.0, 469.0, 470.0, 470.0, 470.0, 471.0, 471.0, 472.0, 472.0, 472.0, 473.0, 473.0, 473.0, 474.0, 474.0, 474.0, 475.0, 475.0, 475.0, 476.0, 476.0, 477.0, 477.0, 477.0, 478.0, 478.0, 478.0, 479.0, 479.0, 479.0, 480.0, 480.0, 481.0, 481.0, 481.0, 482.0, 482.0, 482.0, 483.0, 483.0, 483.0, 484.0, 484.0, 484.0, 485.0, 485.0, 486.0, 486.0, 486.0, 487.0, 487.0, 487.0, 488.0, 488.0, 488.0, 489.0, 489.0, 490.0, 490.0, 490.0, 491.0, 491.0, 491.0, 492.0, 492.0, 492.0, 493.0, 493.0, 493.0, 494.0, 494.0, 495.0, 495.0, 495.0, 496.0, 496.0, 496.0, 497.0, 497.0, 497.0, 498.0, 498.0, 499.0, 499.0, 499.0, 500.0, 500.0, 500.0, 501.0, 501.0, 501.0, 502.0, 502.0, 502.0, 503.0, 503.0, 504.0, 504.0, 504.0, 505.0, 505.0, 505.0, 506.0, 506.0, 506.0, 507.0, 507.0, 508.0, 508.0, 508.0, 509.0, 509.0, 509.0, 510.0, 510.0, 510.0, 511.0, 511.0, 511.0, 512.0, 512.0, 513.0, 513.0, 513.0, 514.0, 514.0, 514.0, 515.0, 515.0, 515.0, 516.0, 516.0, 517.0, 517.0, 517.0, 518.0, 518.0, 518.0, 519.0, 519.0, 519.0, 520.0, 520.0, 520.0, 521.0, 521.0, 522.0, 522.0, 522.0, 523.0, 523.0, 523.0, 524.0, 524.0, 524.0, 525.0, 525.0, 526.0, 526.0, 526.0, 527.0, 527.0, 527.0, 528.0, 528.0, 528.0, 529.0, 529.0, 529.0, 530.0, 530.0, 531.0, 531.0, 531.0, 532.0, 532.0, 532.0, 533.0, 533.0, 533.0, 534.0, 534.0, 535.0, 535.0, 535.0, 536.0, 536.0, 536.0, 537.0, 537.0, 537.0, 538.0, 538.0, 538.0, 539.0, 539.0, 540.0, 540.0, 540.0, 541.0, 541.0, 541.0, 542.0, 542.0, 542.0, 543.0, 543.0, 544.0, 544.0, 544.0, 545.0, 545.0, 545.0, 546.0, 546.0, 546.0, 547.0, 547.0, 547.0, 548.0, 548.0, 549.0, 549.0, 549.0, 550.0, 550.0, 550.0, 551.0, 551.0, 551.0, 552.0, 552.0, 553.0, 553.0, 553.0, 554.0, 554.0, 554.0, 555.0, 555.0, 555.0, 556.0, 556.0, 556.0, 557.0, 557.0]

y_path

x_path = [counter_x_path / 2.0 for counter_x_path in x_path]
y_path = [counter_y_path / 2.0 for counter_y_path in y_path]

x_initial = x_path[0]
y_initial = y_path[0]

x_size_path = x_path.__len__()
y_size_path = y_path.__len__()
path_size = x_size_path

counter_x_path_2 = 0
counter_y_path_2 = 0

if x_initial >= 0:
	for counter_x_path_2 in range(x_size_path):
		x_path[counter_x_path_2] = x_path[counter_x_path_2] - x_initial
else:
	for counter_x_path_2 in range(x_size_path):
		x_path[counter_x_path_2] = x_path[counter_x_path_2] + x_initial

if y_initial >= 0:
	for counter_y_path_2 in range(y_size_path):
		y_path[counter_y_path_2] = y_path[counter_y_path_2] - y_initial
else:
	for counter_y_path_2 in range(y_size_path):
		y_path[counter_y_path_2] = y_path[counter_y_path_2] + y_initial


x_min_path = min(x_path)
y_min_path = min(y_path)
x_max_path = max(x_path)
y_max_path = max(y_path)

x_final_path = x_path[-1]
y_final_path = y_path[-1]

yaw_path = [0.0] * path_size

yaw_counter = 0
for yaw_counter in range(path_size):
	try:
		yaw_path[yaw_counter] = math.atan2(y_path[yaw_counter], x_path[yaw_counter])
	except ZeroDivisionError:
		yaw_path[yaw_counter] = 0.0

x_act = [0.0] * x_size_path
y_act = [0.0] * y_size_path
yaw_act = [0.0] * path_size

counter_planner = 0
x_act[0] = x_path[0]
y_act[0] = y_path[0]
yaw_act[0] = yaw_path[0]

wheel_base = 1.2
#k = 0.063459396
#k = 0.1
#k = 0.5
#k = 0.7
#k = 0.9
k = 1.0
#k = 1.5
#k = 5.0
#k = 15.0
#k = 100.0

x_cur = 0.0
y_cur = 0.0
yaw_cur = 0.0
v_cur = 0.0
vx_cur = 0.0
vy_cur = 0.0
rho_cur = 0.0
yawrate_cur = 0.0

x_prev = 0.0
y_prev = 0.0
yaw_prev = 0.0
v_prev = 0.0
vx_prev = 0.0
vy_prev = 0.0
rho_prev = 0.0
yawrate_prev = 0.0
v_req_prev = 0.0
x_req_prev = 0.0
y_req_prev = 0.0
time_sim = 0.0
delta = 0.0
x_req = 0.0
y_req = 0.0
vy_req = 0.0
vx_req = 0.0
v_req = 0.0
counter_planner_prev = 0
tolerance = 0.15
index_wiegnf = 0

time_list = [0.0]*path_size

while counter_planner < path_size:
	if ((x_cur < (x_req + x_req * tolerance)) and (x_cur > (x_req - x_req * tolerance))) or (x_cur == x_req) or ((x_req < x_cur + (x_cur * tolerance)) and (x_req > (x_cur - x_cur * tolerance))):
		if ((y_cur < (y_req + y_req * tolerance)) and (y_cur > (y_req - y_req * tolerance))) or (y_cur == y_req) or ((y_req < y_cur + (y_cur * tolerance)) and (y_req > (y_cur - y_cur * tolerance))):
			counter_planner += 1
	#if (x_cur > (x_req + x_req * tolerance)):
	#	counter_planner -= 1
	#elif (y_cur > (y_req + y_req * tolerance)):
	#	counter_planner -= 1
	time_sim = float(counter_planner) / float(path_size)
	delta = 0.0
	if counter_planner > (path_size-1):
		counter_planner = (path_size-1)
	x_req = x_path[counter_planner]
	y_req = y_path[counter_planner]
	try:
		yaw_req = math.atan2(y_req, x_req)
	except ZeroDivisionError:
		yaw_req = 0.0
	x_err = x_req - x_cur
	y_err = y_req - y_cur
	x_err_f = x_final_path - x_cur
	y_err_f = y_final_path - y_cur
	yaw_err = yaw_req - yaw_cur
	if yaw_err > math.radians(45):
		yaw_err = math.radians(45)
	elif yaw_err < math.radians(-45):
		yaw_err = math.radians(-45)
	try:
		yawrate_req = v_cur * yaw_err / wheel_base
	except ZeroDivisionError:
		yawrate_req = 0.0
	yawrate_err = yawrate_req - yawrate_cur
	if x_err_f > 0.0 or y_err_f > 0.0:
		if x_err > 0.0  and y_err > 0.0:
			vx_req = (3 * 2**0.5) / 2
			vy_req = (3 * 2**0.5) / 2
		elif x_err > 0.0 and y_err == 0.0:
			vx_req = 3.0
			vy_req = 0.0
		elif x_err == 0.0 and y_err > 0.0:
			vx_req = 0.0
			vy_req = 3.0
		elif x_err == 0.0 and y_err == 0.0:
			vx_req = 0.0
			vy_req = 0.0
		elif x_err < 0.0 and y_err < 0.0:
			vx_req = -(3 * 2**0.5) / 2
			vy_req = -(3 * 2**0.5) / 2
		elif x_err < 0.0 and y_err == 0.0:
			vx_req = -3.0
			vy_req = 0.0
		elif x_err < 0.0 and y_err > 0.0:
			vx_req = -3.0
			vy_req = 0.0
		elif x_err == 0.0 and y_err < 0.0:
			vx_req = 0.0
			vy_req = -3.0
		elif x_err > 0.0 and y_err < 0.0:
			vx_req = 0.0
			vy_req = -3.0
	else:
		vx_req = 0.0
		vy_req = 0.0
	v_req = (vx_req**2 + vy_req**2)**0.5
	v_cur = v_req
	try:
		delta = math.atan2((2.0 * wheel_base * math.sin(yaw_err)), (k * v_cur))
	except ZeroDivisionError:
		delta = 0.0
	rho_req = (x_req**2 + y_req**2)**0.5
	rho_cur = (x_cur**2 + y_cur**2)**0.5
	yawrate_cur = v_cur * delta / wheel_base
	yaw_cur += yawrate_cur * time_sim
	#vx_req = v_req * math.cos(yaw_cur)
	#vy_req = v_req * math.sin(yaw_cur)
	vx_cur = vx_req
	vy_cur = vy_req
	x_cur += vx_cur * time_sim
	y_cur += vy_cur * time_sim
	x_act[counter_planner] = x_cur
	y_act[counter_planner] = y_cur
	yaw_act[counter_planner] = yaw_cur
	time_list[counter_planner] = time_sim
	x_prev = x_cur
	y_prev = y_cur
	yaw_prev = yaw_cur
	vx_prev = vx_cur
	vy_prev = vy_cur
	yawrate_prev = yawrate_cur
	v_prev = v_cur
	rho_prev = rho_cur
	v_req_prev = v_req
	x_req_prev = x_req
	y_req_prev = y_req
	if counter_planner > counter_planner_prev or counter_planner < counter_planner_prev:
		print "counter: ", counter_planner
		print "time: ", time_sim
		print "vx: ", vx_cur
		print "x req: ", x_req
		print "x: ", x_cur
		print "vy: ", vy_cur
		print "y req: ", y_req
		print "y: ", y_cur
		print "yawrate: ", yawrate_cur
		print "yaw req: ", yaw_req
		print "yaw: ", yaw_cur
		print index_wiegnf
		print "------------------------------------"
	else:
		index_wiegnf += 1
	counter_planner_prev = counter_planner
	if index_wiegnf > 1000:
		break

x_min_cont = min(x_act)
y_min_cont = min(y_act)
x_max_cont = max(x_act)
y_max_cont = max(y_act)

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)

ax1.plot(x_act, y_act, 'b-', label = 'Actual Path', linewidth = 2)
ax1.plot(x_path, y_path, 'g-', label = 'Required Path', linewidth = 2)

#legend1 = ax1.legend(loc = 'upper left', shadow = True, fontsize = 'x-small')
#legend1.get_frame().set_facecolor('#00FFCC')

ax2.plot(time_list, x_act, 'b-', label = 'Actual x', linewidth = 2)
ax2.plot(time_list, x_path, 'g-', label = 'Required x', linewidth = 2)

ax3.plot(time_list, y_act, 'b-', label = 'Actual y', linewidth = 2)
ax3.plot(time_list, y_path, 'g-', label = 'Required y', linewidth = 2)

ax4.plot(time_list, yaw_act, 'b-', label = 'Actual yaw', linewidth = 2)
ax4.plot(time_list, yaw_path, 'g-', label = 'Required yaw', linewidth = 2)

plt.show()
